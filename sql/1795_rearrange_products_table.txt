Table: Products

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| product_id  | int     |
| store1      | int     |
| store2      | int     |
| store3      | int     |
+-------------+---------+
product_id is the primary key for this table.
Each row in this table indicates the product's price in 3 different stores: store1, store2, and store3.
If the product is not available in a store, the price will be null in that store's column.
 

Write an SQL query to rearrange the Products table so that each row has (product_id, store, price). If a 
product is not available in a store, do not include a row with that product_id and store combination in the 
result table.

#My Result #1: Using Union Method - filter a sub-table for each one of the stores

SELECT product_id, 'store1' AS store,  store1 AS price FROM Products WHERE store1 IS NOT NULL
UNION 
SELECT product_id, 'store2' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL
UNION 
SELECT product_id, 'store3' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL

#My Result #3: in MS SQL - we could use UNPIVOT funciton

SELECT product_id, store, price
FROM Products
UNPIVOT( price FOR store IN (store1, store2, store3)) AS new_table

#learnings:

1. cannot use alias for WHERE, GROUPBY, HAVING clasues
2. UNPIVOT is only used for the MS SQL, not MySQL
